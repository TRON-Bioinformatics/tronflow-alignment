/*
 * -------------------------------------------------
 *  TRON-Bioinformatics/tronflow-alignment Nextflow config file
 * -------------------------------------------------
 */
params.help= false
params.input_files = false
params.input_fastq1 = false
params.input_fastq2 = false
params.input_name = false
params.reference = false
params.output = 'output'
params.algorithm = "aln"
params.library = "paired"
params.cpus = 8
params.memory = "32g"
params.inception = false
params.skip_trimming = false
params.star_two_pass_mode = false
params.additional_args = ""

profiles {
  conda {
    params.enable_conda = true
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  test {
    params.input_files = "test_data/test_input_paired.txt"
    params.reference = "$baseDir/test_data/ucsc.hg19.minimal.fasta"
    params.cpus = 1
    params.memory = "3g"
    timeline.enabled = false
    report.enabled = false
    trace.enabled = false
    dag.enabled = false
  }
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

cleanup = true

VERSION = "1.8.0"

manifest {
  name = 'TRON-Bioinformatics/tronflow-alignment'
  author = 'Pablo Riesgo-Ferreiro, RÃ¼diger Siek'
  homePage = 'https://github.com/TRON-Bioinformatics/tronflow-alignment'
  description = 'BWA, BWA2 and STAR alignment pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = VERSION
}
params.manifest = manifest

params.help_message = """
TronFlow alignment v${VERSION}

Usage:
    nextflow main.nf --input_files input_files [--reference reference.fasta]

Input:
    * input_fastq1: the path to a FASTQ file (incompatible with --input_files)
    * input_files: the path to a tab-separated values file containing in each row the sample name and two paired FASTQs (incompatible with --fastq1 and --fastq2)
    when `--library paired`, or a single FASTQ file when `--library single`
    Example input file:
    name1	fastq1.1	fastq1.2
    name2	fastq2.1	fastq2.2
    * reference: path to the indexed FASTA genome reference or the star reference folder in case of using star

Optional input:
    * input_fastq2: the path to a second FASTQ file (incompatible with --input_files, incompatible with --library paired)
    * output: the folder where to publish output (default: output)
    * algorithm: determines the BWA algorithm, either `aln`, `mem`, `mem2` or `star` (default `aln`)
    * library: determines whether the sequencing library is paired or single end, either `paired` or `single` (default `paired`)
    * cpus: determines the number of CPUs for each job, with the exception of bwa sampe and samse steps which are not parallelized (default: 8)
    * memory: determines the memory required by each job (default: 8g)
    * inception: if enabled it uses an inception, only valid for BWA aln, it requires a fast file system such as flash (default: false)
    * skip_trimming: skips the read trimming step
    * star_two_pass_mode: activates STAR two-pass mode, increasing sensitivity of novel junction discovery, recommended for RNA variant calling (default: false)
    * additional_args: additional alignment arguments, only effective in BWA mem, BWA mem 2 and STAR (default: none)

Output:
    * A BAM file \${name}.bam and its index
    * FASTP read trimming stats report in HTML format \${name.fastp_stats.html}
    * FASTP read trimming stats report in JSON format \${name.fastp_stats.json}
    """
